generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// keep your existing generator & datasource

enum Role {
  ADMIN
  USER
  Teacher
}

model User {
  id                 Int               @id @default(autoincrement())
  fullName           String
  email              String            @unique
  phoneNumber        String?           @unique
  password           String
  role               Role              @default(USER)
  mustChangePassword Boolean           @default(true)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  // âœ… Relations
  otps   OneTimePassword[]
  Voter  Voter[]
  // NEW: user can have many sessions over time (but only 1 active at a time by policy)
  sessions Session[]
}

enum OtpPurpose {
  LOGIN
  PASSWORD_RESET
  MFA
}

enum OtpChannel {
  EMAIL
  SMS
}

model OneTimePassword {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  purpose     OtpPurpose
  channel     OtpChannel
  destination String
  codeHash    String
  expiresAt   DateTime
  consumedAt  DateTime?
  attempts    Int        @default(0)
  resendCount Int        @default(0)
  lastSentAt  DateTime?
  createdAt   DateTime   @default(now())

  @@index([userId, purpose, expiresAt])
  @@index([destination])
}

model Voter {
  id                        Int      @id @default(autoincrement())
  fullName                  String
  gender                    String
  dateOfBirth               DateTime
  phoneNumber               String   @unique
  city                      String
  district                  String
  address                   String
  hasVoterId                Boolean  @default(false)
  registeredPlace           String?
  wantsToChangeRegistration Boolean?
  newRegistrationPlace      String?
  desiredRegistrationPlace  String?
  clanTitle                 String
  clanSubtitle              String
  createdAt                 DateTime @default(now())
  registeredById            Int
  registeredBy              User     @relation(fields: [registeredById], references: [id])
}

// NEW: session table to validate tokens
model Session {
  id           String    @id @default(cuid())
  userId       Int
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId     String
  userAgent    String?
  ip           String?
  createdAt    DateTime  @default(now())
  lastActiveAt DateTime  @updatedAt
  revokedAt    DateTime?

  @@index([userId, revokedAt])
  @@index([deviceId, userId])
}
