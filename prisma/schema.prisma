generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// --- Your existing enums ---
enum Role {
  ADMIN
  USER
  Teacher
}

// --- Your updated User model ---
model User {
  id                 Int      @id @default(autoincrement())
  fullName           String
  email              String   @unique
  phoneNumber        String?  @unique
  password           String
  role               Role     @default(USER)
  mustChangePassword Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // âœ… OTP relation
  otps OneTimePassword[]

  // Your relation
  Voter Voter[]
}

// --- OTP support enums ---
enum OtpPurpose {
  LOGIN
  PASSWORD_RESET
  MFA
}

enum OtpChannel {
  EMAIL
  SMS
}

// --- OTP model ---
model OneTimePassword {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  purpose     OtpPurpose
  channel     OtpChannel
  destination String // the email or phone used
  codeHash    String // bcrypt/argon2 hash of numeric code
  expiresAt   DateTime
  consumedAt  DateTime?
  attempts    Int        @default(0)
  resendCount Int        @default(0)
  lastSentAt  DateTime?
  createdAt   DateTime   @default(now())

  @@index([userId, purpose, expiresAt])
  @@index([destination])
}

// model Voter {
//   id                        Int      @id @default(autoincrement())
//   fullName                  String
//   gender                    String
//   dateOfBirth               DateTime
//   phoneNumber               String   @unique
//   city                      String
//   district                  String
//   address                   String
//   hasVoterId                Boolean  @default(false)
//   registeredPlace           String? // Goobta uu hore uga diiwaangashanaa (haddii uu leeyahay)
//   wantsToChangeRegistration Boolean? // Haddii uu doonayo inuu beddelo goobta
//   newRegistrationPlace      String? // Goobta cusub ee uu u wareegayo
//   desiredRegistrationPlace  String? // Goobta uu doonayo qof cusub inuu isdiiwaangeliyo
//   clanTitle                 String
//   clanSubtitle              String
//   createdAt                 DateTime @default(now())
// }

model Voter {
  id                        Int      @id @default(autoincrement())
  fullName                  String
  gender                    String
  dateOfBirth               DateTime
  phoneNumber               String   @unique
  city                      String
  district                  String
  address                   String
  hasVoterId                Boolean  @default(false)
  registeredPlace           String?
  wantsToChangeRegistration Boolean?
  newRegistrationPlace      String?
  desiredRegistrationPlace  String?
  clanTitle                 String
  clanSubtitle              String
  createdAt                 DateTime @default(now())
  registeredById            Int // New: FK to User
  registeredBy              User     @relation(fields: [registeredById], references: [id])
}
